#!/usr/bin/python3

import sys
import re
import json

REPO=""
REPO_SLUG=""
EXCLUSIVE_FILES=[]

def is_exclusive_files(codefile):
    global EXCLUSIVE_FILES
    for f in EXCLUSIVE_FILES:
        if f in codefile:
            return True
    return False

def check_and_add_issue(issue, report):
    if is_exclusive_files(issue['file']) == False:
        report['issues'].append(issue)
        return True
    return False

def extract_local_repo_path(message):
    global REPO
    sp = message.split(":")
    filepath = sp[0]
    sp = filepath.split(REPO)
    if filepath == sp[0]:
        return ""
    return sp[0] + REPO + "/"

def remove_local_repo_path(message, localpath):
    return message.replace(localpath, "")

def extract_code_and_comment(message):
    issue = {}
    sp = message.split(":")
    issue['file'] = sp[0]
    issue['line'] = sp[1]
    issue['message'] = ""
    for s in sp[3:]:
        issue['message'] += s
    issue['description'] = ""
    return issue

def is_new_issue(message):
    p = re.compile("/.*[:]\d.*[:]\d.*[:] (warning|error)")
    m = p.match(message)
    if m:
        return True
    else:
        return False

def filter_message(message):
    p = re.compile("^ {4}clang-analyzer-|^Enabled|^Error |^error: |^warning: |generated|^clang-tidy-*.*|^Suppressed|^Use")
    m = p.findall(message)
    if m:
        return True
    else:
        return False    

def run_code_checker(filename):
    try:
        f = open(filename, "r")
    except OSError:
        print('cannot open', filename)
        return -1
    else:
        comment = localpath = ""
        find_issue = issue_count = 0

        report = {}
        report['issues'] = []
        issue = {}

        while True:
            message = f.readline()
            if not message: break

            if (filter_message(message)):
                continue

            if is_new_issue(message):
                if find_issue and check_and_add_issue(issue, report) == False:
                    issue_count -= 1
                
                if localpath == "":
                    localpath = extract_local_repo_path(message)

                issue = extract_code_and_comment(remove_local_repo_path(message, localpath))
                issue_count += 1
                find_issue = 1

            if find_issue:
                issue['description'] += remove_local_repo_path(message, localpath)

        f.close()

        if find_issue and check_and_add_issue(issue, report) == False:
            issue_count -= 1

        report['count'] = issue_count

        for i in range(report['count']):
            item = report['issues'][i]
            print("===========================================================================================================")
            print("ISSUE: #%d\n\nFILE: %s:%s\nMESSAGE:%s" % (i+1, item['file'], item['line'], item['message']))
            print("===========================================================================================================")
            print("%s" % item['description'])

        print("===========================================================================================================")
        print("Found %d issue" % issue_count)
        print("===========================================================================================================")
        
        with open('report.json', 'w') as outfile:
            json.dump(report, outfile)
        
        if issue_count == 0:
            return 0
        else:
            return -1

def main():
    try:
        global REPO, REPO_SLUG, EXCLUSIVE_FILES

        if len(sys.argv) < 3:
            print("# run_codechecker [tidy_result.log] [repo_slug] [exclusive_file1] [exclusive_fileN]")
            sys.exit(-1)

        REPO = REPO_SLUG = sys.argv[2]
        sp = REPO_SLUG.split("/")
        if len(sp) > 1:
            REPO = sp[1]

        EXCLUSIVE_FILES = sys.argv[3:]

        print("REPO = %s" % REPO)
        print("REPO_SLUG = %s" % REPO_SLUG)
        print("RESULT_FILE = %s" % sys.argv[1])
        print("EXCLUSIVE_FILES as belows:")
        print(EXCLUSIVE_FILES)

    except Exception as e:
        print("# run_codechecker [tidy_result.log] [repo_slug] [exclusive_file1] [exclusive_fileN]")
        sys.exit(-1)
    else:
        return run_code_checker(sys.argv[1])

if __name__ == "__main__":
    main()
